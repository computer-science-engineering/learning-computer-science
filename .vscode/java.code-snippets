{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Solution class": {
		"scope": "java",
		"prefix": "cse: Solution class",
		"body": [
			"public class ${1:${TM_FILENAME_BASE}} {",
			"\tpublic static void main(String[] args) {",
			"\t\t",
			"\t}",
			"}"
		]
	},
	"JUnit5 SolutionTest class": {
		"scope": "java",
		"prefix": "cse: JUnit5 SolutionTest class",
		"body": [
			"import static org.junit.jupiter.api.Assertions.*;",
			"",
			"import java.time.Duration;",
			"import org.junit.jupiter.api.Test;",
			"import org.junit.jupiter.api.AfterEach;",
			"import org.junit.jupiter.api.BeforeEach;",
			"",
			"public class ${1:${TM_FILENAME_BASE}} {",
			"\t",
			"\tSolution solution;",
			"\t",
			"\t@BeforeEach",
			"\tpublic void setUp() throws Exception {",
			"\t\tsolution = new Solution();",
			"\t}",
			"\t",
			"\t@AfterEach",
			"\tpublic void tearDown() throws Exception {",
			"\t\tsolution = null;",
			"\t}",
			"\t",
			"\t@Test",
			"\tpublic void MainFunction() {",
			"\t\tassertTimeout(Duration.ofMillis(700), () -> {",
			"\t\t\t String[] args = new String[0];",
			"\t\t\t assertAll(() -> Solution.main(args));",
			"\t\t});",
			"\t}",
			"\t",
			"\t@Test",
			"\tpublic void TrivialCase1() {",
			"\t\t// input = ;",
			"\t\tassertTimeout(Duration.ofMillis(700), () -> {",
			"\t\t\t// expected = ;",
			"\t\t\t// actual = Solution.;",
			"\t\t\t// assertEquals(expected, actual);",
			"\t\t});",
			"\t}",
			"}"
		]
	}
}